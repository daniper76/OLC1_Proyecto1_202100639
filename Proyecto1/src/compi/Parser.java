
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package compi;

import java_cup.runtime.*;
import java.util.LinkedList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\060\000\002\002\004\000\002\002\005\000\002\005" +
    "\004\000\002\005\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\004\000\002\010\020\000\002\011\005\000\002" +
    "\011\003\000\002\013\005\000\002\013\003\000\002\007" +
    "\015\000\002\012\003\000\002\012\003\000\002\006\010" +
    "\000\002\006\011\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\010\000\002\004\010\000\002" +
    "\004\010\000\002\004\010\000\002\004\010\000\002\004" +
    "\010\000\002\004\010\000\002\004\010\000\002\004\010" +
    "\000\002\004\010\000\002\004\010\000\002\014\012\000" +
    "\002\014\015\000\002\016\004\000\002\016\005\000\002" +
    "\015\005\000\002\015\003\000\002\017\014\000\002\020" +
    "\004\000\002\020\003\000\002\021\012\000\002\021\014" +
    "\000\002\021\014\000\002\021\012\000\002\021\012" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\317\000\004\017\005\001\002\000\004\002\321\001" +
    "\002\000\016\003\016\004\021\021\014\031\007\050\017" +
    "\053\015\001\002\000\020\003\ufffd\004\ufffd\020\ufffd\021" +
    "\ufffd\031\ufffd\050\ufffd\053\ufffd\001\002\000\004\022\301" +
    "\001\002\000\020\003\ufffb\004\ufffb\020\ufffb\021\ufffb\031" +
    "\ufffb\050\ufffb\053\ufffb\001\002\000\020\003\ufffc\004\ufffc" +
    "\020\ufffc\021\ufffc\031\ufffc\050\ufffc\053\ufffc\001\002\000" +
    "\020\003\ufffe\004\ufffe\020\ufffe\021\ufffe\031\ufffe\050\ufffe" +
    "\053\ufffe\001\002\000\020\003\ufffa\004\ufffa\020\ufffa\021" +
    "\ufffa\031\ufffa\050\ufffa\053\ufffa\001\002\000\004\022\265" +
    "\001\002\000\004\007\176\001\002\000\004\010\175\001" +
    "\002\000\004\022\146\001\002\000\020\003\ufff9\004\ufff9" +
    "\020\ufff9\021\ufff9\031\ufff9\050\ufff9\053\ufff9\001\002\000" +
    "\004\005\025\001\002\000\020\003\016\004\021\020\024" +
    "\021\014\031\007\050\017\053\015\001\002\000\020\003" +
    "\uffff\004\uffff\020\uffff\021\uffff\031\uffff\050\uffff\053\uffff" +
    "\001\002\000\004\002\000\001\002\000\004\007\026\001" +
    "\002\000\040\011\033\012\030\014\043\032\042\035\031" +
    "\036\045\037\035\040\040\041\044\042\046\043\027\044" +
    "\037\045\034\046\041\047\032\001\002\000\004\007\141" +
    "\001\002\000\014\006\uffec\015\uffec\027\uffec\030\uffec\034" +
    "\uffec\001\002\000\004\007\134\001\002\000\004\007\127" +
    "\001\002\000\014\006\uffed\015\uffed\027\uffed\030\uffed\034" +
    "\uffed\001\002\000\004\007\122\001\002\000\004\007\115" +
    "\001\002\000\004\006\113\001\002\000\004\007\106\001" +
    "\002\000\004\007\101\001\002\000\004\007\074\001\002" +
    "\000\004\014\071\001\002\000\014\006\uffeb\015\uffeb\027" +
    "\uffeb\030\uffeb\034\uffeb\001\002\000\004\007\064\001\002" +
    "\000\004\007\057\001\002\000\004\007\047\001\002\000" +
    "\004\033\050\001\002\000\036\011\033\012\030\014\043" +
    "\035\031\036\045\037\035\040\040\041\044\042\046\043" +
    "\027\044\037\045\034\046\041\047\032\001\002\000\006" +
    "\015\ufff3\034\ufff3\001\002\000\006\015\053\034\054\001" +
    "\002\000\036\011\033\012\030\014\043\035\031\036\045" +
    "\037\035\040\040\041\044\042\046\043\027\044\037\045" +
    "\034\046\041\047\032\001\002\000\004\006\055\001\002" +
    "\000\014\006\uffe5\015\uffe5\027\uffe5\030\uffe5\034\uffe5\001" +
    "\002\000\006\015\ufff4\034\ufff4\001\002\000\036\011\033" +
    "\012\030\014\043\035\031\036\045\037\035\040\040\041" +
    "\044\042\046\043\027\044\037\045\034\046\041\047\032" +
    "\001\002\000\004\015\061\001\002\000\036\011\033\012" +
    "\030\014\043\035\031\036\045\037\035\040\040\041\044" +
    "\042\046\043\027\044\037\045\034\046\041\047\032\001" +
    "\002\000\004\006\063\001\002\000\014\006\uffe9\015\uffe9" +
    "\027\uffe9\030\uffe9\034\uffe9\001\002\000\036\011\033\012" +
    "\030\014\043\035\031\036\045\037\035\040\040\041\044" +
    "\042\046\043\027\044\037\045\034\046\041\047\032\001" +
    "\002\000\004\015\066\001\002\000\036\011\033\012\030" +
    "\014\043\035\031\036\045\037\035\040\040\041\044\042" +
    "\046\043\027\044\037\045\034\046\041\047\032\001\002" +
    "\000\004\006\070\001\002\000\014\006\uffe6\015\uffe6\027" +
    "\uffe6\030\uffe6\034\uffe6\001\002\000\004\006\072\001\002" +
    "\000\004\010\073\001\002\000\020\003\uffee\004\uffee\020" +
    "\uffee\021\uffee\031\uffee\050\uffee\053\uffee\001\002\000\004" +
    "\033\075\001\002\000\036\011\033\012\030\014\043\035" +
    "\031\036\045\037\035\040\040\041\044\042\046\043\027" +
    "\044\037\045\034\046\041\047\032\001\002\000\006\015" +
    "\053\034\077\001\002\000\004\006\100\001\002\000\014" +
    "\006\uffe1\015\uffe1\027\uffe1\030\uffe1\034\uffe1\001\002\000" +
    "\036\011\033\012\030\014\043\035\031\036\045\037\035" +
    "\040\040\041\044\042\046\043\027\044\037\045\034\046" +
    "\041\047\032\001\002\000\004\015\103\001\002\000\036" +
    "\011\033\012\030\014\043\035\031\036\045\037\035\040" +
    "\040\041\044\042\046\043\027\044\037\045\034\046\041" +
    "\047\032\001\002\000\004\006\105\001\002\000\014\006" +
    "\uffe7\015\uffe7\027\uffe7\030\uffe7\034\uffe7\001\002\000\004" +
    "\033\107\001\002\000\036\011\033\012\030\014\043\035" +
    "\031\036\045\037\035\040\040\041\044\042\046\043\027" +
    "\044\037\045\034\046\041\047\032\001\002\000\006\015" +
    "\053\034\111\001\002\000\004\006\112\001\002\000\014" +
    "\006\uffe3\015\uffe3\027\uffe3\030\uffe3\034\uffe3\001\002\000" +
    "\004\010\114\001\002\000\020\003\uffef\004\uffef\020\uffef" +
    "\021\uffef\031\uffef\050\uffef\053\uffef\001\002\000\036\011" +
    "\033\012\030\014\043\035\031\036\045\037\035\040\040" +
    "\041\044\042\046\043\027\044\037\045\034\046\041\047" +
    "\032\001\002\000\004\015\117\001\002\000\036\011\033" +
    "\012\030\014\043\035\031\036\045\037\035\040\040\041" +
    "\044\042\046\043\027\044\037\045\034\046\041\047\032" +
    "\001\002\000\004\006\121\001\002\000\014\006\uffe8\015" +
    "\uffe8\027\uffe8\030\uffe8\034\uffe8\001\002\000\004\033\123" +
    "\001\002\000\036\011\033\012\030\014\043\035\031\036" +
    "\045\037\035\040\040\041\044\042\046\043\027\044\037" +
    "\045\034\046\041\047\032\001\002\000\006\015\053\034" +
    "\125\001\002\000\004\006\126\001\002\000\014\006\uffe2" +
    "\015\uffe2\027\uffe2\030\uffe2\034\uffe2\001\002\000\004\033" +
    "\130\001\002\000\036\011\033\012\030\014\043\035\031" +
    "\036\045\037\035\040\040\041\044\042\046\043\027\044" +
    "\037\045\034\046\041\047\032\001\002\000\006\015\053" +
    "\034\132\001\002\000\004\006\133\001\002\000\014\006" +
    "\uffe0\015\uffe0\027\uffe0\030\uffe0\034\uffe0\001\002\000\036" +
    "\011\033\012\030\014\043\035\031\036\045\037\035\040" +
    "\040\041\044\042\046\043\027\044\037\045\034\046\041" +
    "\047\032\001\002\000\004\015\136\001\002\000\036\011" +
    "\033\012\030\014\043\035\031\036\045\037\035\040\040" +
    "\041\044\042\046\043\027\044\037\045\034\046\041\047" +
    "\032\001\002\000\004\006\140\001\002\000\014\006\uffea" +
    "\015\uffea\027\uffea\030\uffea\034\uffea\001\002\000\004\033" +
    "\142\001\002\000\036\011\033\012\030\014\043\035\031" +
    "\036\045\037\035\040\040\041\044\042\046\043\027\044" +
    "\037\045\034\046\041\047\032\001\002\000\006\015\053" +
    "\034\144\001\002\000\004\006\145\001\002\000\014\006" +
    "\uffe4\015\uffe4\027\uffe4\030\uffe4\034\uffe4\001\002\000\004" +
    "\022\147\001\002\000\006\051\150\052\151\001\002\000" +
    "\004\016\171\001\002\000\004\016\152\001\002\000\036" +
    "\011\033\012\030\014\043\035\031\036\045\037\035\040" +
    "\040\041\044\042\046\043\027\044\037\045\034\046\041" +
    "\047\032\001\002\000\004\027\154\001\002\000\004\026" +
    "\155\001\002\000\006\032\157\033\160\001\002\000\004" +
    "\030\167\001\002\000\004\014\166\001\002\000\036\011" +
    "\033\012\030\014\043\035\031\036\045\037\035\040\040" +
    "\041\044\042\046\043\027\044\037\045\034\046\041\047" +
    "\032\001\002\000\010\015\uffda\030\uffda\034\uffda\001\002" +
    "\000\006\015\163\034\164\001\002\000\036\011\033\012" +
    "\030\014\043\035\031\036\045\037\035\040\040\041\044" +
    "\042\046\043\027\044\037\045\034\046\041\047\032\001" +
    "\002\000\004\030\uffdc\001\002\000\010\015\uffdb\030\uffdb" +
    "\034\uffdb\001\002\000\004\030\uffdd\001\002\000\004\010" +
    "\170\001\002\000\020\003\uffde\004\uffde\020\uffde\021\uffde" +
    "\031\uffde\050\uffde\053\uffde\001\002\000\036\011\033\012" +
    "\030\014\043\035\031\036\045\037\035\040\040\041\044" +
    "\042\046\043\027\044\037\045\034\046\041\047\032\001" +
    "\002\000\006\015\163\030\173\001\002\000\004\010\174" +
    "\001\002\000\020\003\uffdf\004\uffdf\020\uffdf\021\uffdf\031" +
    "\uffdf\050\uffdf\053\uffdf\001\002\000\020\003\ufff8\004\ufff8" +
    "\020\ufff8\021\ufff8\031\ufff8\050\ufff8\053\ufff8\001\002\000" +
    "\014\054\177\055\204\056\203\057\201\060\200\001\002" +
    "\000\004\022\256\001\002\000\004\022\247\001\002\000" +
    "\004\022\240\001\002\000\016\054\177\055\204\056\203" +
    "\057\201\060\200\061\230\001\002\000\004\022\217\001" +
    "\002\000\004\022\206\001\002\000\016\054\uffd7\055\uffd7" +
    "\056\uffd7\057\uffd7\060\uffd7\061\uffd7\001\002\000\004\022" +
    "\207\001\002\000\004\024\210\001\002\000\004\016\211" +
    "\001\002\000\004\033\212\001\002\000\036\011\033\012" +
    "\030\014\043\035\031\036\045\037\035\040\040\041\044" +
    "\042\046\043\027\044\037\045\034\046\041\047\032\001" +
    "\002\000\006\015\163\034\214\001\002\000\004\030\215" +
    "\001\002\000\004\010\216\001\002\000\016\054\uffd5\055" +
    "\uffd5\056\uffd5\057\uffd5\060\uffd5\061\uffd5\001\002\000\004" +
    "\022\220\001\002\000\004\023\221\001\002\000\004\016" +
    "\222\001\002\000\004\033\223\001\002\000\036\011\033" +
    "\012\030\014\043\035\031\036\045\037\035\040\040\041" +
    "\044\042\046\043\027\044\037\045\034\046\041\047\032" +
    "\001\002\000\006\015\163\034\225\001\002\000\004\030" +
    "\226\001\002\000\004\010\227\001\002\000\016\054\uffd4" +
    "\055\uffd4\056\uffd4\057\uffd4\060\uffd4\061\uffd4\001\002\000" +
    "\004\062\232\001\002\000\016\054\uffd8\055\uffd8\056\uffd8" +
    "\057\uffd8\060\uffd8\061\uffd8\001\002\000\004\030\233\001" +
    "\002\000\004\010\234\001\002\000\004\006\235\001\002" +
    "\000\004\030\236\001\002\000\004\010\237\001\002\000" +
    "\020\003\uffd9\004\uffd9\020\uffd9\021\uffd9\031\uffd9\050\uffd9" +
    "\053\uffd9\001\002\000\004\022\241\001\002\000\004\024" +
    "\242\001\002\000\004\016\243\001\002\000\036\011\033" +
    "\012\030\014\043\035\031\036\045\037\035\040\040\041" +
    "\044\042\046\043\027\044\037\045\034\046\041\047\032" +
    "\001\002\000\004\030\245\001\002\000\004\010\246\001" +
    "\002\000\016\054\uffd3\055\uffd3\056\uffd3\057\uffd3\060\uffd3" +
    "\061\uffd3\001\002\000\004\022\250\001\002\000\004\024" +
    "\251\001\002\000\004\016\252\001\002\000\036\011\033" +
    "\012\030\014\043\035\031\036\045\037\035\040\040\041" +
    "\044\042\046\043\027\044\037\045\034\046\041\047\032" +
    "\001\002\000\004\030\254\001\002\000\004\010\255\001" +
    "\002\000\016\054\uffd2\055\uffd2\056\uffd2\057\uffd2\060\uffd2" +
    "\061\uffd2\001\002\000\004\022\257\001\002\000\004\024" +
    "\260\001\002\000\004\016\261\001\002\000\036\011\033" +
    "\012\030\014\043\035\031\036\045\037\035\040\040\041" +
    "\044\042\046\043\027\044\037\045\034\046\041\047\032" +
    "\001\002\000\004\030\263\001\002\000\004\010\264\001" +
    "\002\000\016\054\uffd6\055\uffd6\056\uffd6\057\uffd6\060\uffd6" +
    "\061\uffd6\001\002\000\006\023\266\024\270\001\002\000" +
    "\004\022\ufff1\001\002\000\004\022\271\001\002\000\004" +
    "\022\ufff0\001\002\000\004\022\272\001\002\000\004\014" +
    "\273\001\002\000\004\025\274\001\002\000\004\027\275" +
    "\001\002\000\036\011\033\012\030\014\043\035\031\036" +
    "\045\037\035\040\040\041\044\042\046\043\027\044\037" +
    "\045\034\046\041\047\032\001\002\000\004\030\277\001" +
    "\002\000\004\010\300\001\002\000\020\003\ufff2\004\ufff2" +
    "\020\ufff2\021\ufff2\031\ufff2\050\ufff2\053\ufff2\001\002\000" +
    "\006\023\266\024\270\001\002\000\004\022\303\001\002" +
    "\000\004\022\304\001\002\000\004\032\305\001\002\000" +
    "\004\014\306\001\002\000\004\025\307\001\002\000\004" +
    "\027\310\001\002\000\004\033\311\001\002\000\036\011" +
    "\033\012\030\014\043\035\031\036\045\037\035\040\040" +
    "\041\044\042\046\043\027\044\037\045\034\046\041\047" +
    "\032\001\002\000\006\015\314\034\315\001\002\000\006" +
    "\015\ufff5\034\ufff5\001\002\000\036\011\033\012\030\014" +
    "\043\035\031\036\045\037\035\040\040\041\044\042\046" +
    "\043\027\044\037\045\034\046\041\047\032\001\002\000" +
    "\004\030\316\001\002\000\004\010\317\001\002\000\020" +
    "\003\ufff7\004\ufff7\020\ufff7\021\ufff7\031\ufff7\050\ufff7\053" +
    "\ufff7\001\002\000\006\015\ufff6\034\ufff6\001\002\000\004" +
    "\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\317\000\004\002\003\001\001\000\002\001\001\000" +
    "\020\003\011\005\021\006\005\007\010\010\007\014\012" +
    "\017\017\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\003\022\006\005\007\010\010\007\014\012\017" +
    "\017\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\004\035\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\004\050\013\051\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\004\055\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\004\057\001\001\000" +
    "\002\001\001\000\004\004\061\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\004\064\001\001\000\002\001" +
    "\001\000\004\004\066\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\004\050\013\075\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\004\101\001\001\000\002\001\001\000\004\004\103" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\004\050\013\107\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\004\115\001\001\000\002\001\001" +
    "\000\004\004\117\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\004\050\013\123\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\004\050\013\130\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\004" +
    "\134\001\001\000\002\001\001\000\004\004\136\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\004\050\013\142\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\004\152" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\016" +
    "\155\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\004\160\015\161\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\004\164\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\004\160\015\171\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\020\201\021\204\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\021\230\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\004\160\015\212\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\004\160\015\223\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\004\243\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\004\252" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\004\261\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\012\266\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\004\275\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\012\301\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\004\312\011\311\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\004\317\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public String resultado = ""; 

    public void syntax_error(Symbol s)
    {
            System.err.println("Error Sintactico: "+ s.value + " - Fila: " + s.right + " - Columna: " + s.left + ". Recuperado" );
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
            System.err.println("Error Sintactico: "+ s.value + " - Fila: " + s.right + " - Columna: " + s.left + ". Sin recuperacion." );
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {

  
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= PROGRAM lista_instrucciones ENDPROGRAM 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // lista_instrucciones ::= lista_instrucciones instruccion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_instrucciones",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // lista_instrucciones ::= instruccion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_instrucciones",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // instruccion ::= print 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // instruccion ::= variable 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // instruccion ::= conjunto 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // instruccion ::= imprimir 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // instruccion ::= graficar 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // instruccion ::= error PYC 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // conjunto ::= ARR DOSPUNTOS tipo DOSPUNTOS DOSPUNTOS ARROBA ID FLECHA GUION CORA elementos CORC END PYC 
            {
              Object RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		
        instrucciones.instruccion.mostrarLista((LinkedList<String>) lista);
        instrucciones.instruccion.GuardarArreglo(variable,(LinkedList<String>) lista);
      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conjunto",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // elementos ::= elementos COMA expresion 
            {
              Object RESULT =null;
		int listaexpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listaexpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object listaexp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  
            LinkedList<String> lista = (LinkedList<String>) listaexp;
            lista.add(exp.toString());
            RESULT = lista;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elementos",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // elementos ::= expresion 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
            LinkedList<String> lista = new LinkedList<>();
            lista.add(exp.toString());
            RESULT = lista;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elementos",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // datos ::= datos COMA expresion 
            {
              Object RESULT =null;
		int listadatosleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listadatosright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object listadatos = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  
            LinkedList<String> lista = (LinkedList<String>) listadatos;
            lista.add(exp.toString());
            RESULT = lista;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("datos",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // datos ::= expresion 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
            LinkedList<String> lista = new LinkedList<>();
            lista.add(exp.toString());
            RESULT = lista;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("datos",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // variable ::= VAR DOSPUNTOS tipo DOSPUNTOS DOSPUNTOS ID FLECHA GUION expresion END PYC 
            {
              Object RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		instrucciones.instruccion.GuardarVariable(variable.toString(), valor.toString());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // tipo ::= DOUBLE 
            {
              Object RESULT =null;
		RESULT="double";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // tipo ::= CHAR 
            {
              Object RESULT =null;
		RESULT="char";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // print ::= RPRINT EXCL PARIZQ expresion PARDER PYC 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 System.out.println(val); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("print",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // print ::= RPRINT EXCL PARIZQ ARROBA ID PARDER PYC 
            {
              Object RESULT =null;
		int claveleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int claveright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String clave = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 instrucciones.instruccion.mostrarLista((LinkedList<String>) instrucciones.instruccion.ObtenerArreglo(clave)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("print",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expresion ::= ENTERO 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=val.toString();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expresion ::= CADENA 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=val.toString();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expresion ::= ID 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = instrucciones.instruccion.ObtenerVariable(val.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expresion ::= SUMA PARIZQ expresion COMA expresion PARDER 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT=operacion.operaciones.Suma(val1.toString(), val2.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expresion ::= RESTA PARIZQ expresion COMA expresion PARDER 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT=operacion.operaciones.Resta(val1.toString(), val2.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expresion ::= MULTIPLICAR PARIZQ expresion COMA expresion PARDER 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT=operacion.operaciones.Multiplicar(val1.toString(), val2.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expresion ::= DIVIDIR PARIZQ expresion COMA expresion PARDER 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT=operacion.operaciones.Dividir(val1.toString(), val2.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expresion ::= MODULO PARIZQ expresion COMA expresion PARDER 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT=operacion.operaciones.Modulo(val1.toString(), val2.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expresion ::= MEDIA PARIZQ CORA datos CORC PARDER 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT=operacion.operaciones.Media((LinkedList<String>)lista); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expresion ::= MEDIANA PARIZQ CORA datos CORC PARDER 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT=operacion.operaciones.Mediana((LinkedList<String>)lista); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expresion ::= MODA PARIZQ CORA datos CORC PARDER 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT=operacion.operaciones.Moda((LinkedList<String>)lista); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expresion ::= VARIANZA PARIZQ CORA datos CORC PARDER 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT=operacion.operaciones.Varianza((LinkedList<String>)lista); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expresion ::= MAYOR PARIZQ CORA datos CORC PARDER 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT=operacion.operaciones.Mayor((LinkedList<String>)lista); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expresion ::= MENOR PARIZQ CORA datos CORC PARDER 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT=operacion.operaciones.Menor((LinkedList<String>)lista); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // imprimir ::= CONSOLE DOSPUNTOS DOSPUNTOS PRINT IGUAL listaexpresiones END PYC 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 instrucciones.instruccion.mostrarLista((LinkedList<String>) lista); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("imprimir",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // imprimir ::= CONSOLE DOSPUNTOS DOSPUNTOS COLUMNA IGUAL expresion GUION FLECHADERECHA listaarreglo END PYC 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 
               System.out.println(val);
               System.out.println("------------------------");
               instrucciones.instruccion.mostrarLista((LinkedList<String>) lista); 
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("imprimir",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // listaarreglo ::= ARROBA ID 
            {
              Object RESULT =null;
		int claveleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int claveright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String clave = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= (LinkedList<String>) instrucciones.instruccion.ObtenerArreglo(clave); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listaarreglo",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // listaarreglo ::= CORA listaexpresiones CORC 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT=(LinkedList<String>) lista; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listaarreglo",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // listaexpresiones ::= listaexpresiones COMA expresion 
            {
              Object RESULT =null;
		int listaexpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listaexpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object listaexp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  
            LinkedList<String> lista = (LinkedList<String>) listaexp;
            lista.add(exp.toString());
            RESULT = lista;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listaexpresiones",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // listaexpresiones ::= expresion 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
            LinkedList<String> lista = new LinkedList<>();
            lista.add(exp.toString());
            RESULT = lista;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listaexpresiones",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // graficar ::= BARRAS PARIZQ sentencias EXEC GRAPBAR END PYC PARDER END PYC 
            {
              Object RESULT =null;
		
        graficas.graficar.barras(graficas.graficar.titulobarras, graficas.graficar.tituloxbarras, graficas.graficar.tituloybarras, graficas.graficar.ejeybarras,graficas.graficar.ejexbarras);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("graficar",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // sentencias ::= sentencias linea 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencias",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // sentencias ::= linea 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencias",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // linea ::= TITULO DOSPUNTOS DOSPUNTOS CHAR IGUAL expresion END PYC 
            {
              Object RESULT =null;
		int titleleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int titleright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object title = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 graficas.graficar.AgregarTituloBarras(title.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("linea",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // linea ::= EJEX DOSPUNTOS DOSPUNTOS CHAR IGUAL CORA listaexpresiones CORC END PYC 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 graficas.graficar.AgregarEjeXBarras((LinkedList<String>) lista); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("linea",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // linea ::= EJEY DOSPUNTOS DOSPUNTOS DOUBLE IGUAL CORA listaexpresiones CORC END PYC 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 graficas.graficar.AgregarEjeYBarras((LinkedList<String>) lista); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("linea",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // linea ::= TITULOX DOSPUNTOS DOSPUNTOS CHAR IGUAL expresion END PYC 
            {
              Object RESULT =null;
		int entradaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int entradaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object entrada = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 graficas.graficar.AgregarTituloXBarras(entrada.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("linea",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // linea ::= TITULOY DOSPUNTOS DOSPUNTOS CHAR IGUAL expresion END PYC 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 graficas.graficar.AgregarTituloYBarras(valor.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("linea",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
